import discord
from discord import app_commands
from discord.ext import commands
from typing import Optional
import asyncio
from datetime import datetime, timedelta
from database import Database
from utils import EmbedBuilder, ButtonBuilder, GameLogic
from config import COLORS, EMOJIS, ECONOMY, TIMERS

class ShopCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database()
    
    @app_commands.command(name="loja", description="Mostra a loja de jogadores")
    async def show_shop(self, interaction: discord.Interaction):
        """Mostra a loja de jogadores"""
        await interaction.response.defer()
        
        user_id = interaction.user.id
        
        # Verifica se tem time
        team = await self.db.get_team(user_id)
        if not team:
            embed = EmbedBuilder.create_embed(
                "‚ùå Sem Time",
                "Voc√™ precisa criar um time primeiro!\nUse `/criartime` para criar seu time.",
                COLORS['error']
            )
            await interaction.followup.send(embed=embed)
            return
        
        # Obt√©m itens da loja
        shop_items = await self.db.get_shop_items()
        
        if not shop_items:
            embed = EmbedBuilder.create_embed(
                "üõí Loja Vazia",
                "A loja est√° vazia no momento.\nTente novamente em alguns minutos!",
                COLORS['warning']
            )
            await interaction.followup.send(embed=embed)
            return
        
        # Obt√©m dinheiro do usu√°rio
        user = await self.db.get_user(user_id)
        
        embed = EmbedBuilder.shop_embed(shop_items)
        embed.add_field(
            name="üí∞ Seu Dinheiro",
            value=f"**${user['money']:,}**",
            inline=False
        )
        
        # Adiciona bot√µes
        view = discord.ui.View()
        view.add_item(discord.ui.Button(
            style=discord.ButtonStyle.primary,
            label="Atualizar Loja",
            emoji=EMOJIS['reload'],
            custom_id="refresh_shop"
        ))
        view.add_item(discord.ui.Button(
            style=discord.ButtonStyle.success,
            label="Comprar Pack",
            emoji=EMOJIS['shop'],
            custom_id="buy_pack"
        ))
        
        await interaction.followup.send(embed=embed, view=view)
    
    @app_commands.command(name="comprar", description="Compra um jogador da loja")
    @app_commands.describe(numero="N√∫mero do jogador na loja")
    async def buy_player(self, interaction: discord.Interaction, numero: int):
        """Compra um jogador da loja"""
        await interaction.response.defer()
        
        user_id = interaction.user.id
        
        # Verifica se tem time
        team = await self.db.get_team(user_id)
        if not team:
            embed = EmbedBuilder.create_embed(
                "‚ùå Sem Time",
                "Voc√™ precisa criar um time primeiro!",
                COLORS['error']
            )
            await interaction.followup.send(embed=embed)
            return
        
        # Obt√©m itens da loja
        shop_items = await self.db.get_shop_items()
        
        if not shop_items:
            embed = EmbedBuilder.create_embed(
                "‚ùå Loja Vazia",
                "A loja est√° vazia no momento.",
                COLORS['error']
            )
            await interaction.followup.send(embed=embed)
            return
        
        # Verifica se o n√∫mero √© v√°lido
        if numero < 1 or numero > len(shop_items):
            embed = EmbedBuilder.create_embed(
                "‚ùå N√∫mero Inv√°lido",
                f"Digite um n√∫mero entre 1 e {len(shop_items)}.",
                COLORS['error']
            )
            await interaction.followup.send(embed=embed)
            return
        
        # Obt√©m o item selecionado
        selected_item = shop_items[numero - 1]
        
        # Obt√©m dinheiro do usu√°rio
        user = await self.db.get_user(user_id)
        
        # Verifica se tem dinheiro suficiente
        if user['money'] < selected_item['price']:
            embed = EmbedBuilder.create_embed(
                "‚ùå Dinheiro Insuficiente",
                f"Voc√™ precisa de **${selected_item['price']:,}** mas tem apenas **${user['money']:,}**.",
                COLORS['error']
            )
            await interaction.followup.send(embed=embed)
            return
        
        # Tenta comprar o jogador
        success = await self.db.buy_player(user_id, selected_item['id'])
        
        if success:
            embed = EmbedBuilder.create_embed(
                "‚úÖ Compra Realizada!",
                f"Voc√™ comprou **{selected_item['name']}** por **${selected_item['price']:,}**!\n\n"
                f"Overall: {selected_item['overall']} | Time: {selected_item['team']}\n"
                f"Raridade: {selected_item['rarity']} | Posi√ß√£o: {selected_item['position']}",
                COLORS['success']
            )
            
            # Atualiza dinheiro restante
            remaining_money = user['money'] - selected_item['price']
            embed.add_field(
                name="üí∞ Dinheiro Restante",
                value=f"**${remaining_money:,}**",
                inline=False
            )
        else:
            embed = EmbedBuilder.create_embed(
                "‚ùå Erro na Compra",
                "Erro ao realizar a compra. Tente novamente.",
                COLORS['error']
            )
        
        await interaction.followup.send(embed=embed)
    
    @app_commands.command(name="pack", description="Abre um pack gratuito de jogadores")
    async def open_free_pack(self, interaction: discord.Interaction):
        """Abre um pack gratuito"""
        await interaction.response.defer()
        
        user_id = interaction.user.id
        
        # Verifica se tem time
        team = await self.db.get_team(user_id)
        if not team:
            embed = EmbedBuilder.create_embed(
                "‚ùå Sem Time",
                "Voc√™ precisa criar um time primeiro!",
                COLORS['error']
            )
            await interaction.followup.send(embed=embed)
            return
        
        # Verifica se pode abrir pack (cooldown de 25 minutos)
        user = await self.db.get_user(user_id)
        if user['last_free_pack']:
            try:
                # Converte string para datetime
                if 'Z' in user['last_free_pack']:
                    last_pack = datetime.fromisoformat(user['last_free_pack'].replace('Z', '+00:00'))
                else:
                    last_pack = datetime.fromisoformat(user['last_free_pack'])
                
                time_diff = datetime.now() - last_pack.replace(tzinfo=None)
                
                if time_diff.total_seconds() < TIMERS['free_pack']:
                    remaining_time = TIMERS['free_pack'] - time_diff.total_seconds()
                    minutes = int(remaining_time // 60)
                    seconds = int(remaining_time % 60)
                    
                    embed = EmbedBuilder.create_embed(
                        "‚è∞ Cooldown",
                        f"Voc√™ pode abrir outro pack em **{minutes}m {seconds}s**.",
                        COLORS['warning']
                    )
                    await interaction.followup.send(embed=embed)
                    return
            except Exception as e:
                print(f"Erro ao verificar cooldown: {e}")
                # Se houver erro, continua normalmente
        
        # Obt√©m jogador aleat√≥rio
        player = await self.db.get_random_player()
        
        if not player:
            embed = EmbedBuilder.create_embed(
                "‚ùå Erro",
                "Erro ao gerar jogador. Tente novamente.",
                COLORS['error']
            )
            await interaction.followup.send(embed=embed)
            return
        
        # Adiciona jogador ao usu√°rio
        success = await self.db.add_player_to_user(user_id, player['player_id'])
        
        if success:
            # Atualiza timestamp do √∫ltimo pack
            await self.db.update_last_free_pack(user_id)
            
            # Cria embed do jogador obtido
            embed = EmbedBuilder.player_card(player)
            embed.title = "üéÅ Pack Aberto!"
            embed.description = f"üéâ Parab√©ns! Voc√™ obteve:\n\n{embed.description}"
            
            # Adiciona informa√ß√µes extras
            embed.add_field(
                name="üì¶ Tipo de Pack",
                value="Pack Gratuito",
                inline=True
            )
            
            embed.add_field(
                name="‚è∞ Pr√≥ximo Pack",
                value="Em 25 minutos",
                inline=True
            )
            
            # Adiciona emoji de raridade
            rarity_emoji = {
                'comum': '‚ö™',
                'raro': 'üîµ',
                '√©pico': 'üü£',
                'lend√°rio': 'üü°'
            }
            
            embed.add_field(
                name="‚≠ê Raridade",
                value=f"{rarity_emoji.get(player['rarity'], '‚ö™')} {player['rarity'].title()}",
                inline=True
            )
            
        else:
            embed = EmbedBuilder.create_embed(
                "‚ùå Erro",
                "Erro ao adicionar jogador. Tente novamente.",
                COLORS['error']
            )
        
        await interaction.followup.send(embed=embed)
    
    @app_commands.command(name="packpremium", description="Compra e abre um pack premium")
    async def buy_premium_pack(self, interaction: discord.Interaction):
        """Compra um pack premium"""
        await interaction.response.defer()
        
        user_id = interaction.user.id
        
        # Verifica se tem time
        team = await self.db.get_team(user_id)
        if not team:
            embed = EmbedBuilder.create_embed(
                "‚ùå Sem Time",
                "Voc√™ precisa criar um time primeiro!",
                COLORS['error']
            )
            await interaction.followup.send(embed=embed)
            return
        
        # Obt√©m dinheiro do usu√°rio
        user = await self.db.get_user(user_id)
        
        # Verifica se tem dinheiro suficiente
        if user['money'] < ECONOMY['pack_cost']:
            embed = EmbedBuilder.create_embed(
                "‚ùå Dinheiro Insuficiente",
                f"Pack Premium custa **${ECONOMY['pack_cost']:,}** mas voc√™ tem apenas **${user['money']:,}**.",
                COLORS['error']
            )
            await interaction.followup.send(embed=embed)
            return
        
        # Remove dinheiro
        await self.db.update_money(user_id, -ECONOMY['pack_cost'])
        
        # Gera 3 jogadores (melhor chance de raridade)
        players = []
        for _ in range(3):
            player = await self.db.get_random_player()
            if player:
                success = await self.db.add_player_to_user(user_id, player['player_id'])
                if success:
                    players.append(player)
        
        if players:
            embed = EmbedBuilder.create_embed(
                "üéÅ Pack Premium Aberto!",
                f"Voc√™ obteve **{len(players)} jogadores** por **${ECONOMY['pack_cost']:,}**!",
                COLORS['purple']
            )
            
            # Mostra os jogadores obtidos
            for i, player in enumerate(players, 1):
                rarity_emoji = {'comum': '‚ö™', 'raro': 'üîµ', '√©pico': 'üü£', 'lend√°rio': 'üü°'}
                embed.add_field(
                    name=f"{i}. {player['name']} {rarity_emoji.get(player['rarity'], '‚ö™')}",
                    value=f"Overall: **{player['overall']}** | Time: {player['team']}\n"
                          f"Raridade: {player['rarity']} | Posi√ß√£o: {player['position']}",
                    inline=False
                )
            
            # Atualiza dinheiro restante
            remaining_money = user['money'] - ECONOMY['pack_cost']
            embed.add_field(
                name="üí∞ Dinheiro Restante",
                value=f"**${remaining_money:,}**",
                inline=False
            )
        else:
            embed = EmbedBuilder.create_embed(
                "‚ùå Erro",
                "Erro ao abrir pack. Seu dinheiro foi devolvido.",
                COLORS['error']
            )
            # Devolve o dinheiro
            await self.db.update_money(user_id, ECONOMY['pack_cost'])
        
        await interaction.followup.send(embed=embed)
    
    @app_commands.command(name="diario", description="Coleta recompensa di√°ria")
    async def daily_reward(self, interaction: discord.Interaction):
        """Coleta recompensa di√°ria"""
        await interaction.response.defer()
        
        user_id = interaction.user.id
        
        # Verifica se tem time
        team = await self.db.get_team(user_id)
        if not team:
            embed = EmbedBuilder.create_embed(
                "‚ùå Sem Time",
                "Voc√™ precisa criar um time primeiro!",
                COLORS['error']
            )
            await interaction.followup.send(embed=embed)
            return
        
        # Verifica se pode coletar (cooldown de 24 horas)
        user = await self.db.get_user(user_id)
        if user['last_daily']:
            try:
                # Converte string para datetime
                if 'Z' in user['last_daily']:
                    last_daily = datetime.fromisoformat(user['last_daily'].replace('Z', '+00:00'))
                else:
                    last_daily = datetime.fromisoformat(user['last_daily'])
                
                time_diff = datetime.now() - last_daily.replace(tzinfo=None)
                
                if time_diff.total_seconds() < TIMERS['daily_reset']:
                    remaining_time = TIMERS['daily_reset'] - time_diff.total_seconds()
                    hours = int(remaining_time // 3600)
                    minutes = int((remaining_time % 3600) // 60)
                    
                    embed = EmbedBuilder.create_embed(
                        "‚è∞ Cooldown",
                        f"Voc√™ pode coletar a recompensa di√°ria em **{hours}h {minutes}m**.",
                        COLORS['warning']
                    )
                    await interaction.followup.send(embed=embed)
                    return
            except Exception as e:
                print(f"Erro ao verificar cooldown di√°rio: {e}")
                # Se houver erro, continua normalmente
        
        # Adiciona dinheiro
        await self.db.update_money(user_id, ECONOMY['daily_reward'])
        
        # Atualiza timestamp da √∫ltima recompensa di√°ria
        await self.db.update_last_daily(user_id)
        
        embed = EmbedBuilder.create_embed(
            "üí∞ Recompensa Di√°ria!",
            f"Voc√™ recebeu **${ECONOMY['daily_reward']:,}** como recompensa di√°ria!\n\n"
            f"Use o dinheiro para comprar jogadores na loja ou abrir packs premium.",
            COLORS['success']
        )
        
        # Atualiza dinheiro total
        new_money = user['money'] + ECONOMY['daily_reward']
        embed.add_field(
            name="üí∞ Dinheiro Total",
            value=f"**${new_money:,}**",
            inline=False
        )
        
        await interaction.followup.send(embed=embed)
    
    @app_commands.command(name="dinheiro", description="Mostra seu dinheiro atual")
    async def show_money(self, interaction: discord.Interaction):
        """Mostra o dinheiro do usu√°rio"""
        await interaction.response.defer()
        
        user_id = interaction.user.id
        
        # Verifica se tem time
        team = await self.db.get_team(user_id)
        if not team:
            embed = EmbedBuilder.create_embed(
                "‚ùå Sem Time",
                "Voc√™ precisa criar um time primeiro!",
                COLORS['error']
            )
            await interaction.followup.send(embed=embed)
            return
        
        # Obt√©m dinheiro do usu√°rio
        user = await self.db.get_user(user_id)
        
        embed = EmbedBuilder.create_embed(
            f"{EMOJIS['money']} Seu Dinheiro",
            f"Voc√™ possui **${user['money']:,}**",
            COLORS['gold']
        )
        
        # Adiciona informa√ß√µes sobre como ganhar dinheiro
        embed.add_field(
            name="üí° Como Ganhar Dinheiro",
            value="‚Ä¢ **Recompensa Di√°ria:** `/diario` (+$1,000)\n"
                  "‚Ä¢ **Vit√≥rias em Partidas:** +$500\n"
                  "‚Ä¢ **Vender Jogadores:** 80% do valor de mercado",
            inline=False
        )
        
        # Adiciona informa√ß√µes sobre gastos
        embed.add_field(
            name="üí∏ Como Gastar Dinheiro",
            value="‚Ä¢ **Loja:** Comprar jogadores\n"
                  "‚Ä¢ **Pack Premium:** $5,000 (3 jogadores)\n"
                  "‚Ä¢ **Derrotas em Partidas:** -$200",
            inline=False
        )
        
        await interaction.followup.send(embed=embed)

async def setup(bot):
    await bot.add_cog(ShopCog(bot))
