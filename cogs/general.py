import discord
from discord import app_commands
from discord.ext import commands
from typing import Optional
import asyncio
from datetime import datetime
from database import Database
from utils import EmbedBuilder, LanguageManager
from config import COLORS, EMOJIS, LANGUAGES

class GeneralCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database()
    
    @app_commands.command(name="ajuda", description="Mostra todos os comandos dispon√≠veis")
    async def help_command(self, interaction: discord.Interaction):
        """Mostra todos os comandos dispon√≠veis"""
        await interaction.response.defer()
        
        embed = EmbedBuilder.create_embed(
            "üèÄ HoopCore - Comandos",
            "Lista completa de todos os comandos dispon√≠veis:",
            COLORS['primary']
        )
        
        embed.add_field(
            name="üèóÔ∏è Times",
            value="‚Ä¢ `/criartime` - Cria um novo time\n"
                  "‚Ä¢ `/time` - Mostra informa√ß√µes do seu time\n"
                  "‚Ä¢ `/jogadores` - Lista seus jogadores",
            inline=False
        )
        
        embed.add_field(
            name="üí∞ Economia",
            value="‚Ä¢ `/loja` - Mostra jogadores dispon√≠veis\n"
                  "‚Ä¢ `/pack` - Ganha um jogador aleat√≥rio\n"
                  "‚Ä¢ `/packpremium` - Pack premium (mais raros)\n"
                  "‚Ä¢ `/diario` - Coleta recompensa di√°ria\n"
                  "‚Ä¢ `/vender` - Vende um jogador",
            inline=False
        )
        
        embed.add_field(
            name="‚öîÔ∏è Competi√ß√£o",
            value="‚Ä¢ `/desafiar` - Desafia outro jogador\n"
                  "‚Ä¢ `/partida` - Inicia partida simulada\n"
                  "‚Ä¢ `/ranking` - Mostra rankings do servidor",
            inline=False
        )
        
        embed.add_field(
            name="‚öôÔ∏è Utilit√°rios",
            value="‚Ä¢ `/estatisticas` - Suas estat√≠sticas\n"
                  "‚Ä¢ `/ping` - Testa lat√™ncia do bot\n"
                  "‚Ä¢ `/idioma` - Troca idioma do bot",
            inline=False
        )
        
        embed.add_field(
            name="üí° Dicas",
            value="‚Ä¢ Crie um time primeiro com `/criartime`\n"
                  "‚Ä¢ Use `/pack` para obter jogadores gratuitos\n"
                  "‚Ä¢ Complete seu time com 5 titulares\n"
                  "‚Ä¢ Desafie outros jogadores para ganhar dinheiro",
            inline=False
        )
        
        embed.set_footer(text="HoopCore - Jogo de Basquete da NBA 2025 | Criado por Theus.zk")
        
        await interaction.followup.send(embed=embed)
    
    @app_commands.command(name="status", description="Mostra status do bot")
    async def status_command(self, interaction: discord.Interaction):
        """Mostra status do bot"""
        await interaction.response.defer()
        
        # Calcula uptime
        uptime = datetime.now() - self.bot.start_time if hasattr(self.bot, 'start_time') else None
        
        # Obt√©m estat√≠sticas
        total_guilds = len(self.bot.guilds)
        total_users = sum(guild.member_count for guild in self.bot.guilds)
        
        embed = EmbedBuilder.create_embed(
            f"{EMOJIS['basketball']} Status do HoopCore",
            "Informa√ß√µes sobre o bot e sua performance",
            COLORS['info']
        )
        
        embed.add_field(
            name="üìä Estat√≠sticas",
            value=f"**Servidores:** {total_guilds}\n"
                  f"**Usu√°rios:** {total_users:,}\n"
                  f"**Lat√™ncia:** {round(self.bot.latency * 1000)}ms",
            inline=True
        )
        
        if uptime:
            days = uptime.days
            hours, remainder = divmod(uptime.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            uptime_str = f"{days}d {hours}h {minutes}m {seconds}s"
        else:
            uptime_str = "Desconhecido"
        
        embed.add_field(
            name="‚è∞ Uptime",
            value=f"**Tempo Online:** {uptime_str}\n"
                  f"**Vers√£o:** 1.0.0\n"
                  f"**Discord.py:** {discord.__version__}",
            inline=True
        )
        
        embed.add_field(
            name="üîß Funcionalidades",
            value="‚Ä¢ ‚úÖ Sistema de Times\n"
                  "‚Ä¢ ‚úÖ Loja de Jogadores\n"
                  "‚Ä¢ ‚úÖ Sistema de Partidas\n"
                  "‚Ä¢ ‚úÖ Rankings\n"
                  "‚Ä¢ ‚úÖ Sistema Econ√¥mico\n"
                  "‚Ä¢ ‚úÖ Packs de Jogadores",
            inline=False
        )
        
        embed.set_footer(text="HoopCore - Desenvolvido com ‚ù§Ô∏è")
        
        await interaction.followup.send(embed=embed)
    
    @app_commands.command(name="idioma", description="Troca o idioma do bot")
    @app_commands.describe(
        idioma="Idioma desejado"
    )
    @app_commands.choices(idioma=[
        app_commands.Choice(name="Portugu√™s", value="pt"),
        app_commands.Choice(name="English", value="en"),
        app_commands.Choice(name="Espa√±ol", value="es")
    ])
    async def change_language(self, interaction: discord.Interaction, idioma: str):
        """Troca o idioma do bot"""
        await interaction.response.defer()
        
        user_id = interaction.user.id
        
        # Verifica se usu√°rio existe
        user = await self.db.get_user(user_id)
        if not user:
            # Cria usu√°rio se n√£o existir
            await self.db.create_user(user_id, interaction.user.display_name)
        
        # Atualiza idioma (implementar no database)
        # Por enquanto, apenas confirma
        
        language_name = LANGUAGES.get(idioma, "Portugu√™s")
        
        embed = EmbedBuilder.create_embed(
            "üåç Idioma Alterado",
            f"O idioma do bot foi alterado para **{language_name}**!",
            COLORS['success']
        )
        
        embed.add_field(
            name="‚ÑπÔ∏è Informa√ß√£o",
            value="Algumas mensagens podem continuar em portugu√™s por enquanto.\n"
                  "A tradu√ß√£o completa ser√° implementada em breve!",
            inline=False
        )
        
        await interaction.followup.send(embed=embed)
    
    @app_commands.command(name="info", description="Informa√ß√µes sobre o bot")
    async def info_command(self, interaction: discord.Interaction):
        """Mostra informa√ß√µes sobre o bot"""
        await interaction.response.defer()
        
        embed = EmbedBuilder.create_embed(
            "üèÄ Sobre o HoopCore",
            "Um jogo de basquete inspirado na NBA 2025",
            COLORS['primary']
        )
        
        embed.add_field(
            name="üéØ Sobre",
            value="HoopCore √© um bot de jogo de basquete que permite voc√™:\n"
                  "‚Ä¢ Criar e gerenciar seu pr√≥prio time\n"
                  "‚Ä¢ Colecionar jogadores da NBA 2025\n"
                  "‚Ä¢ Competir em partidas emocionantes\n"
                  "‚Ä¢ Construir o melhor time da liga",
            inline=False
        )
        
        embed.add_field(
            name="üèÜ Jogadores",
            value="‚Ä¢ **Lend√°rios:** LeBron James, Stephen Curry, Giannis, etc.\n"
                  "‚Ä¢ **√âpicos:** Ja Morant, Zion Williamson, Anthony Edwards\n"
                  "‚Ä¢ **Raros:** Jogadores com overall 80-89\n"
                  "‚Ä¢ **Comuns:** Jogadores com overall 70-79",
            inline=False
        )
        
        embed.add_field(
            name="üí∞ Economia",
            value="‚Ä¢ **Recompensa Di√°ria:** $1,000\n"
                  "‚Ä¢ **Vit√≥ria em Partida:** +$500\n"
                  "‚Ä¢ **Pack Premium:** $5,000\n"
                  "‚Ä¢ **Dinheiro Inicial:** $10,000",
            inline=False
        )
        
        embed.add_field(
            name="‚öôÔ∏è Sistema",
            value="‚Ä¢ **5 Titulares** + Reservas\n"
                  "‚Ä¢ **Posi√ß√µes:** PG, SG, SF, PF, C\n"
                  "‚Ä¢ **Overall:** Baseado na m√©dia dos titulares\n"
                  "‚Ä¢ **Rankings:** Por vit√≥rias, dinheiro e overall",
            inline=False
        )
        
        embed.add_field(
            name="üë®‚Äçüíª Desenvolvedor",
            value="**Theus.zk** - Criador e desenvolvedor do HoopCore",
            inline=False
        )
        
        embed.set_footer(text="Desenvolvido com discord.py | NBA 2025")
        
        await interaction.followup.send(embed=embed)
    
    @app_commands.command(name="creditos", description="Mostra os cr√©ditos do bot")
    async def credits(self, interaction: discord.Interaction):
        """Mostra os cr√©ditos do bot"""
        await interaction.response.defer()
        
        embed = EmbedBuilder.create_embed(
            f"{EMOJIS['star']} Cr√©ditos",
            "Pessoas e recursos que tornaram este bot poss√≠vel",
            COLORS['gold']
        )
        
        embed.add_field(
            name="üë®‚Äçüíª Desenvolvimento",
            value="‚Ä¢ **Desenvolvedor:** IA Assistant\n"
                  "‚Ä¢ **Framework:** discord.py 2.3.0+\n"
                  "‚Ä¢ **Banco de Dados:** SQLite\n"
                  "‚Ä¢ **Inspira√ß√£o:** DreamTeam (Futebol)",
            inline=False
        )
        
        embed.add_field(
            name="üèÄ NBA 2025",
            value="‚Ä¢ **Jogadores:** Baseados na temporada 2025\n"
                  "‚Ä¢ **Times:** Todos os 30 times da NBA\n"
                  "‚Ä¢ **Overall:** Baseado em estat√≠sticas reais\n"
                  "‚Ä¢ **Raridades:** Sistema balanceado",
            inline=False
        )
        
        embed.add_field(
            name="üõ†Ô∏è Tecnologias",
            value="‚Ä¢ **Python 3.8+**\n"
                  "‚Ä¢ **discord.py**\n"
                  "‚Ä¢ **SQLite**\n"
                  "‚Ä¢ **asyncio**",
            inline=False
        )
        
        embed.add_field(
            name="üôè Agradecimentos",
            value="‚Ä¢ Comunidade Discord\n"
                  "‚Ä¢ Desenvolvedores do discord.py\n"
                  "‚Ä¢ F√£s de basquete da NBA\n"
                  "‚Ä¢ Todos os usu√°rios do bot",
            inline=False
        )
        
        embed.set_footer(text="Obrigado por usar o HoopCore! üèÄ")
        
        await interaction.followup.send(embed=embed)
    
    @app_commands.command(name="ping", description="Testa a lat√™ncia do bot")
    async def ping(self, interaction: discord.Interaction):
        """Testa a lat√™ncia do bot"""
        await interaction.response.defer()
        
        latency = round(self.bot.latency * 1000)
        
        # Determina cor baseada na lat√™ncia
        if latency < 100:
            color = COLORS['success']
            status = "Excelente"
        elif latency < 200:
            color = COLORS['warning']
            status = "Boa"
        else:
            color = COLORS['error']
            status = "Lenta"
        
        embed = EmbedBuilder.create_embed(
            "üèì Pong!",
            f"Lat√™ncia do bot: **{latency}ms**\nStatus: **{status}**",
            color
        )
        
        embed.add_field(
            name="üìä Informa√ß√µes",
            value=f"‚Ä¢ **Lat√™ncia:** {latency}ms\n"
                  f"‚Ä¢ **Status:** {status}\n"
                  f"‚Ä¢ **API:** Discord",
            inline=False
        )
        
        await interaction.followup.send(embed=embed)

    @app_commands.command(name="admin", description="Comandos administrativos (apenas para o dono)")
    async def admin_command(self, interaction: discord.Interaction):
        """Comandos administrativos para o dono do bot"""
        # Verifica se √© o dono do bot - SUBSTITUA PELO SEU ID REAL
        OWNER_ID = 960343374727114752  # ‚úÖ ID do Theus.zk
        
        if interaction.user.id != OWNER_ID:
            embed = EmbedBuilder.create_embed(
                "‚ùå Acesso Negado",
                "Apenas o dono do bot pode usar este comando.",
                COLORS['error']
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        await interaction.response.defer()
        
        # Cria embed com op√ß√µes administrativas
        embed = EmbedBuilder.create_embed(
            "‚öôÔ∏è Painel Administrativo",
            "Selecione uma a√ß√£o administrativa:",
            COLORS['primary']
        )
        
        # Cria bot√µes para a√ß√µes administrativas
        view = discord.ui.View()
        
        # Adicionar dinheiro
        view.add_item(discord.ui.Button(
            style=discord.ButtonStyle.green,
            label="üí∞ Adicionar Dinheiro",
            emoji="üíµ",
            custom_id="admin_add_money"
        ))
        
        # Adicionar jogador
        view.add_item(discord.ui.Button(
            style=discord.ButtonStyle.blue,
            label="üèÄ Adicionar Jogador",
            emoji="üë§",
            custom_id="admin_add_player"
        ))
        
        # Resetar cooldowns
        view.add_item(discord.ui.Button(
            style=discord.ButtonStyle.yellow,
            label="‚è∞ Resetar Cooldowns",
            emoji="üîÑ",
            custom_id="admin_reset_cooldowns"
        ))
        
        # Ver estat√≠sticas do servidor
        view.add_item(discord.ui.Button(
            style=discord.ButtonStyle.secondary,
            label="üìä Estat√≠sticas do Servidor",
            emoji="üìà",
            custom_id="admin_server_stats"
        ))
        
        await interaction.followup.send(embed=embed, view=view)

async def setup(bot):
    await bot.add_cog(GeneralCog(bot))
